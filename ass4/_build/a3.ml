type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | ABS
  | TILDA
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | REM
  | CONJ
  | DISJ
  | EQ
  | GT
  | LT
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | COMMA
  | PROJ
  | LET
  | IN
  | END
  | BACKSLASH
  | DOT
  | DEF
  | SEMICOLON
  | PARALLEL
  | LOCAL
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
# 42 "a3.ml"
let yytransl_const = [|
  260 (* ABS *);
  261 (* TILDA *);
  262 (* NOT *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
  267 (* REM *);
  268 (* CONJ *);
  269 (* DISJ *);
  270 (* EQ *);
  271 (* GT *);
  272 (* LT *);
  273 (* LP *);
  274 (* RP *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* FI *);
  279 (* COMMA *);
  280 (* PROJ *);
  281 (* LET *);
  282 (* IN *);
  283 (* END *);
  284 (* BACKSLASH *);
  285 (* DOT *);
  286 (* DEF *);
  287 (* SEMICOLON *);
  288 (* PARALLEL *);
  289 (* LOCAL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\003\000\004\000\004\000\005\000\005\000\
\005\000\005\000\006\000\006\000\006\000\007\000\007\000\007\000\
\007\000\008\000\008\000\009\000\009\000\010\000\010\000\011\000\
\011\000\013\000\013\000\013\000\014\000\014\000\014\000\014\000\
\016\000\016\000\016\000\012\000\015\000\015\000\002\000\002\000\
\002\000\002\000\017\000\000\000\000\000"

let yylen = "\002\000\
\003\000\001\000\003\000\001\000\002\000\001\000\003\000\003\000\
\003\000\001\000\003\000\003\000\001\000\003\000\003\000\003\000\
\001\000\002\000\001\000\002\000\001\000\007\000\001\000\007\000\
\001\000\004\000\004\000\001\000\003\000\003\000\001\000\005\000\
\001\000\001\000\001\000\001\000\003\000\003\000\005\000\003\000\
\003\000\001\000\004\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\035\000\033\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\017\000\019\000\021\000\023\000\
\025\000\000\000\031\000\000\000\000\000\000\000\042\000\018\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
\000\000\030\000\000\000\000\000\036\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\014\000\
\015\000\016\000\000\000\000\000\000\000\040\000\041\000\000\000\
\000\000\000\000\000\000\000\000\026\000\027\000\000\000\000\000\
\000\000\000\000\032\000\039\000\000\000\000\000\022\000\024\000"

let yydgoto = "\003\000\
\015\000\030\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\062\000\025\000\026\000\036\000\027\000\
\031\000"

let yysindex = "\039\000\
\004\255\071\255\000\000\000\000\000\000\000\000\014\255\046\255\
\056\255\004\255\004\255\020\255\071\255\021\255\074\255\093\255\
\000\000\094\255\047\255\102\255\000\000\000\000\000\000\000\000\
\000\000\107\255\000\000\122\255\071\255\036\255\000\000\000\000\
\000\000\094\255\007\255\028\255\059\255\125\255\057\255\099\255\
\004\255\004\255\056\255\056\255\056\255\056\255\056\255\056\255\
\056\255\056\255\004\255\115\255\064\255\100\255\100\255\000\000\
\004\255\000\000\004\255\004\255\000\000\108\255\004\255\010\255\
\093\255\000\000\047\255\047\255\047\255\102\255\102\255\000\000\
\000\000\000\000\073\255\004\255\071\255\000\000\000\000\074\255\
\074\255\013\255\125\255\243\254\000\000\000\000\074\255\066\255\
\004\255\114\255\000\000\000\000\023\255\075\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\133\000\195\000\
\000\000\164\000\085\000\022\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\134\000\000\000\000\000\
\000\000\180\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\210\000\000\000\106\000\127\000\148\000\043\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\255\
\084\255\000\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\249\255\245\255\094\000\095\000\129\000\071\000\074\000\069\000\
\132\000\128\000\000\000\057\000\047\000\078\000\000\000\000\000\
\068\000"

let yytablesize = 498
let yytable = "\041\000\
\028\000\039\000\035\000\037\000\004\000\005\000\006\000\007\000\
\008\000\009\000\004\000\005\000\006\000\091\000\004\000\005\000\
\006\000\053\000\008\000\041\000\010\000\013\000\011\000\040\000\
\056\000\041\000\010\000\012\000\013\000\057\000\010\000\014\000\
\011\000\089\000\013\000\041\000\038\000\012\000\013\000\001\000\
\002\000\014\000\012\000\075\000\095\000\058\000\004\000\005\000\
\006\000\080\000\059\000\081\000\082\000\046\000\047\000\084\000\
\004\000\005\000\006\000\007\000\008\000\043\000\010\000\011\000\
\011\000\088\000\054\000\055\000\087\000\012\000\013\000\041\000\
\010\000\014\000\011\000\004\000\005\000\006\000\060\000\012\000\
\013\000\093\000\063\000\014\000\010\000\041\000\041\000\054\000\
\055\000\077\000\086\000\010\000\092\000\038\000\054\000\055\000\
\054\000\055\000\038\000\013\000\028\000\037\000\014\000\029\000\
\042\000\007\000\037\000\043\000\044\000\045\000\048\000\049\000\
\050\000\067\000\068\000\069\000\072\000\073\000\074\000\070\000\
\071\000\078\000\079\000\051\000\052\000\061\000\008\000\064\000\
\076\000\028\000\083\000\094\000\044\000\045\000\065\000\033\000\
\066\000\034\000\032\000\090\000\096\000\085\000\000\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\028\000\000\000\028\000\028\000\028\000\028\000\
\000\000\000\000\028\000\028\000\013\000\013\000\000\000\028\000\
\028\000\013\000\013\000\013\000\013\000\013\000\000\000\013\000\
\000\000\013\000\013\000\013\000\013\000\000\000\000\000\013\000\
\013\000\012\000\012\000\000\000\013\000\013\000\012\000\012\000\
\012\000\012\000\012\000\000\000\012\000\000\000\012\000\012\000\
\012\000\012\000\000\000\000\000\012\000\012\000\011\000\011\000\
\000\000\012\000\012\000\011\000\011\000\011\000\011\000\011\000\
\000\000\011\000\000\000\011\000\011\000\011\000\011\000\043\000\
\043\000\011\000\011\000\000\000\043\000\043\000\011\000\011\000\
\010\000\010\000\010\000\010\000\010\000\000\000\010\000\000\000\
\010\000\010\000\010\000\010\000\000\000\000\000\010\000\010\000\
\000\000\000\000\000\000\010\000\010\000\007\000\007\000\007\000\
\007\000\007\000\000\000\007\000\000\000\007\000\007\000\007\000\
\007\000\000\000\000\000\007\000\007\000\000\000\000\000\000\000\
\007\000\007\000\008\000\008\000\008\000\008\000\008\000\000\000\
\008\000\000\000\008\000\008\000\008\000\008\000\000\000\000\000\
\008\000\008\000\000\000\000\000\000\000\008\000\008\000\009\000\
\009\000\009\000\009\000\009\000\000\000\009\000\000\000\009\000\
\009\000\009\000\009\000\000\000\000\000\009\000\009\000\006\000\
\006\000\000\000\009\000\009\000\000\000\006\000\000\000\006\000\
\006\000\006\000\006\000\000\000\000\000\006\000\006\000\005\000\
\005\000\000\000\006\000\006\000\000\000\005\000\000\000\005\000\
\005\000\005\000\005\000\000\000\000\000\005\000\005\000\002\000\
\000\000\000\000\005\000\005\000\002\000\000\000\002\000\002\000\
\002\000\002\000\000\000\000\000\002\000\002\000\001\000\000\000\
\000\000\002\000\002\000\001\000\000\000\001\000\001\000\001\000\
\001\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\
\001\000\001\000"

let yycheck = "\013\001\
\000\000\013\000\010\000\011\000\001\001\002\001\003\001\004\001\
\005\001\006\001\001\001\002\001\003\001\027\001\001\001\002\001\
\003\001\029\000\005\001\013\001\017\001\000\000\019\001\003\001\
\018\001\013\001\017\001\024\001\025\001\023\001\017\001\028\001\
\019\001\021\001\025\001\013\001\017\001\024\001\025\001\001\000\
\002\000\028\001\000\000\051\000\022\001\018\001\001\001\002\001\
\003\001\057\000\023\001\059\000\060\000\007\001\008\001\063\000\
\001\001\002\001\003\001\004\001\005\001\000\000\017\001\000\000\
\019\001\077\000\031\001\032\001\076\000\024\001\025\001\013\001\
\017\001\028\001\019\001\001\001\002\001\003\001\020\001\024\001\
\025\001\089\000\026\001\028\001\000\000\013\001\013\001\031\001\
\032\001\026\001\018\001\017\001\027\001\018\001\031\001\032\001\
\031\001\032\001\023\001\025\001\030\001\018\001\028\001\033\001\
\012\001\000\000\023\001\014\001\015\001\016\001\009\001\010\001\
\011\001\043\000\044\000\045\000\048\000\049\000\050\000\046\000\
\047\000\054\000\055\000\017\001\003\001\001\001\000\000\029\001\
\014\001\030\001\023\001\018\001\000\000\000\000\041\000\008\000\
\042\000\009\000\007\000\083\000\094\000\064\000\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\255\255\255\255\026\001\027\001\007\001\008\001\255\255\031\001\
\032\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\255\255\255\255\026\001\
\027\001\007\001\008\001\255\255\031\001\032\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\007\001\008\001\
\255\255\031\001\032\001\012\001\013\001\014\001\015\001\016\001\
\255\255\018\001\255\255\020\001\021\001\022\001\023\001\026\001\
\027\001\026\001\027\001\255\255\031\001\032\001\031\001\032\001\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\031\001\032\001\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\255\255\255\255\255\255\
\031\001\032\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\255\255\020\001\021\001\022\001\023\001\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\031\001\032\001\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\255\255\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\027\001\012\001\
\013\001\255\255\031\001\032\001\255\255\018\001\255\255\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\027\001\012\001\
\013\001\255\255\031\001\032\001\255\255\018\001\255\255\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\027\001\013\001\
\255\255\255\255\031\001\032\001\018\001\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\013\001\255\255\
\255\255\031\001\032\001\018\001\255\255\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\255\255\255\255\255\255\
\031\001\032\001"

let yynames_const = "\
  ABS\000\
  TILDA\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  REM\000\
  CONJ\000\
  DISJ\000\
  EQ\000\
  GT\000\
  LT\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  COMMA\000\
  PROJ\000\
  LET\000\
  IN\000\
  END\000\
  BACKSLASH\000\
  DOT\000\
  DEF\000\
  SEMICOLON\000\
  PARALLEL\000\
  LOCAL\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A1.exptree) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'or_expression) in
    Obj.repr(
# 29 "a3.mly"
                                                   ( Disjunction(_1,_3) )
# 330 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expression) in
    Obj.repr(
# 30 "a3.mly"
                                           ( _1 )
# 337 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not) in
    Obj.repr(
# 33 "a3.mly"
                                      ( Conjunction(_1,_3) )
# 345 "a3.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not) in
    Obj.repr(
# 34 "a3.mly"
                                      ( _1 )
# 352 "a3.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'comp) in
    Obj.repr(
# 37 "a3.mly"
                                   ( Not(_2) )
# 359 "a3.ml"
               : 'not))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comp) in
    Obj.repr(
# 38 "a3.mly"
                                           ( _1 )
# 366 "a3.ml"
               : 'not))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 40 "a3.mly"
                                        ( Equals(_1,_3) )
# 374 "a3.ml"
               : 'comp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 41 "a3.mly"
                                        ( GreaterT(_1,_3) )
# 382 "a3.ml"
               : 'comp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 42 "a3.mly"
                                        ( LessT(_1,_3) )
# 390 "a3.ml"
               : 'comp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 43 "a3.mly"
                                            ( _1 )
# 397 "a3.ml"
               : 'comp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 45 "a3.mly"
                                             ( Sub(_1,_3) )
# 405 "a3.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 46 "a3.mly"
                                            ( Add(_1,_3) )
# 413 "a3.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 47 "a3.mly"
                                             ( _1 )
# 420 "a3.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs) in
    Obj.repr(
# 50 "a3.mly"
                                   ( Mult(_1,_3) )
# 428 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs) in
    Obj.repr(
# 51 "a3.mly"
                                 ( Div(_1,_3) )
# 436 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs) in
    Obj.repr(
# 52 "a3.mly"
                                       ( Rem(_1,_3) )
# 444 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs) in
    Obj.repr(
# 53 "a3.mly"
                                 ( _1 )
# 451 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'neg) in
    Obj.repr(
# 56 "a3.mly"
                                      ( Abs(_2) )
# 458 "a3.ml"
               : 'abs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neg) in
    Obj.repr(
# 57 "a3.mly"
                                      ( _1 )
# 465 "a3.ml"
               : 'abs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ifte) in
    Obj.repr(
# 59 "a3.mly"
                                      ( Negative(_2) )
# 472 "a3.ml"
               : 'neg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte) in
    Obj.repr(
# 60 "a3.mly"
                                      ( _1 )
# 479 "a3.ml"
               : 'neg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : A1.exptree) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : A1.exptree) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 62 "a3.mly"
                                                        ( IfThenElse(_2,_4,_6) )
# 488 "a3.ml"
               : 'ifte))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proj) in
    Obj.repr(
# 63 "a3.mly"
                                      ( _1 )
# 495 "a3.ml"
               : 'ifte))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 65 "a3.mly"
                                      ( Project((_3,_5),_7) )
# 504 "a3.ml"
               : 'proj))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 66 "a3.mly"
                                       ( _1 )
# 511 "a3.ml"
               : 'proj))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'paren) in
    Obj.repr(
# 68 "a3.mly"
                                       ( FunctionAbstraction (_2,_4) )
# 519 "a3.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'paren) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 69 "a3.mly"
                                              ( FunctionCall (_1,_3) )
# 527 "a3.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren) in
    Obj.repr(
# 70 "a3.mly"
                                  ( _1 )
# 534 "a3.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 73 "a3.mly"
                                            ( InParen(_2) )
# 541 "a3.ml"
               : 'paren))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuplelist) in
    Obj.repr(
# 74 "a3.mly"
                                        ( Tuple(List.length _2 , _2) )
# 548 "a3.ml"
               : 'paren))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 75 "a3.mly"
                                             ( _1 )
# 555 "a3.ml"
               : 'paren))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : A1.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : A1.exptree) in
    Obj.repr(
# 76 "a3.mly"
                                                  ( Let (_2,_4) )
# 563 "a3.ml"
               : 'paren))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 79 "a3.mly"
                                      ( B(_1) )
# 570 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "a3.mly"
                                      ( Var(_1) )
# 577 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 81 "a3.mly"
                                      ( N(_1) )
# 584 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 84 "a3.mly"
                                          ( _1 )
# 591 "a3.ml"
               : 'int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tuplelist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A1.exptree) in
    Obj.repr(
# 87 "a3.mly"
                                                        ( _1 @ [_3] )
# 599 "a3.ml"
               : 'tuplelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A1.exptree) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A1.exptree) in
    Obj.repr(
# 88 "a3.mly"
                                                              ( [_1;_3] )
# 607 "a3.ml"
               : 'tuplelist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : A1.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : A1.definition) in
    Obj.repr(
# 93 "a3.mly"
                                                  ( Local (_2,_4) )
# 615 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A1.definition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 94 "a3.mly"
                                            ( (Sequence [_1;_3]) )
# 623 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A1.definition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 95 "a3.mly"
                                           ( (Parallel [_1;_3]) )
# 631 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 96 "a3.mly"
                                      ( _1 )
# 638 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A1.exptree) in
    Obj.repr(
# 99 "a3.mly"
                                            ( Simple(_2,_4) )
# 646 "a3.ml"
               : 'def))
(* Entry exp_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry def_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.exptree)
let def_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : A1.definition)
